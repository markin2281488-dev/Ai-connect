from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime
from enum import Enum
import uuid

class ConversationStage(str, Enum):
    INTRODUCTION = "introduction"  # –î–µ–Ω—å 1-2: –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ
    FATHER_INCIDENT = "father_incident"  # –î–µ–Ω—å 3: –∏–Ω—Å—É–ª—å—Ç –æ—Ç—Ü–∞
    WORK_OFFER = "work_offer"  # –î–µ–Ω—å 5: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –ø–æ —Ä–∞–±–æ—Ç–µ
    HUMAN_TAKEOVER = "human_takeover"  # –ü–µ—Ä–µ–¥–∞—á–∞ —á–µ–ª–æ–≤–µ–∫—É
    CLOSED = "closed"  # –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç

class HandoffTrigger(str, Enum):
    WORK_INTEREST = "work_interest"  # –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ–π
    AGREED_TO_HELP = "agreed_to_help"  # –°–æ–≥–ª–∞—Å–∏–ª–∞—Å—å –ø–æ–º–æ—á—å
    UNEMPLOYED = "unemployed"  # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –Ω–µ —É—á–∏—Ç—Å—è
    NO_RESPONSE = "no_response"  # –î–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç

class MessageType(str, Enum):
    TEXT = "text"
    PHOTO = "photo"
    VOICE = "voice"
    STICKER = "sticker"
    VIDEO = "video"

# –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
class User(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    telegram_user_id: int
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–≤—É—à–∫–µ
    location: Optional[str] = None
    work_status: Optional[str] = None  # —Ä–∞–±–æ—Ç–∞–µ—Ç/—É—á–∏—Ç—Å—è/–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    work_description: Optional[str] = None
    salary_satisfaction: Optional[str] = None
    relationship_status: Optional[str] = None
    
    # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    interests: List[str] = []
    personality_traits: List[str] = []
    vulnerabilities: List[str] = []
    communication_style: Optional[str] = None
    
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)

class Message(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    conversation_id: str
    sender: str  # "user" –∏–ª–∏ "stas" 
    message_type: MessageType = MessageType.TEXT
    content: str
    telegram_message_id: Optional[int] = None
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    is_read: bool = False
    response_time_seconds: Optional[int] = None  # –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    created_at: datetime = Field(default_factory=datetime.utcnow)

class Conversation(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    user_id: str
    telegram_chat_id: int
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    current_stage: ConversationStage = ConversationStage.INTRODUCTION
    stage_started_at: datetime = Field(default_factory=datetime.utcnow)
    is_active: bool = True
    
    # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    messages: List[Message] = []
    
    # –°—á–µ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
    total_messages: int = 0
    stage_message_count: int = 0  # —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    avg_response_time: Optional[float] = None
    engagement_score: float = 0.0  # 0-100
    last_user_message_at: Optional[datetime] = None
    last_ai_message_at: Optional[datetime] = None
    
    # –¢—Ä–∏–≥–≥–µ—Ä—ã
    handoff_triggered: bool = False
    handoff_reason: Optional[HandoffTrigger] = None
    handoff_at: Optional[datetime] = None
    
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)

class ConversationContext(BaseModel):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò"""
    conversation_id: str
    user_info: User
    current_stage: ConversationStage
    recent_messages: List[Message]
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    time_of_day: str
    days_since_start: int
    user_mood_indicator: Optional[str] = None
    last_topic: Optional[str] = None

class LearningData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    conversation_id: str
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    stage_transition_success: bool = False
    user_engagement_level: int  # 1-10
    response_rate: float  # –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    avg_response_time: float  # —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conversation_duration_days: float
    
    # –£—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    successful_phrases: List[str] = []
    successful_topics: List[str] = []
    optimal_message_timing: List[Dict[str, Any]] = []
    
    # –ù–µ—É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã  
    failed_phrases: List[str] = []
    ignored_messages: List[str] = []
    
    final_outcome: Optional[str] = None  # "handoff", "closed", "active"
    created_at: datetime = Field(default_factory=datetime.utcnow)

# API –º–æ–¥–µ–ª–∏
class MessageCreate(BaseModel):
    content: str
    message_type: MessageType = MessageType.TEXT

class ConversationResponse(BaseModel):
    conversation: Conversation
    suggested_response: Optional[str] = None
    next_action: Optional[str] = None
    should_handoff: bool = False
    handoff_reason: Optional[str] = None

class StasPersona(BaseModel):
    """–ü–µ—Ä—Å–æ–Ω–∞–∂ –°—Ç–∞—Å–∞"""
    name: str = "–°—Ç–∞—Å"
    age: int = 27
    location: str = "–ú–æ—Å–∫–≤–∞"
    work: str = "–ö—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è
    birth_place: str = "–ì—Ä–µ—Ü–∏—è"
    family_background: str = "–†—É—Å—Å–∫–æ-–≥—Ä–µ—á–µ—Å–∫–∞—è —Å–µ–º—å—è (–æ—Ç–µ—Ü –≥—Ä–µ–∫, –º–∞–º–∞ —Ä—É—Å—Å–∫–∞—è)"
    education: str = "–ú–ì–£, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"
    work_experience: str = "6 –ª–µ—Ç –≤ –∫—Ä–∏–ø—Ç–æ—Å—Ñ–µ—Ä–µ, –Ω–∞—á–∏–Ω–∞–ª —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∞–ª—å–ø–∏–Ω–∏–∑–º–∞ –∏ —Å—Ç—Ä–æ–π–∫–∏"
    relationship_history: str = "–û—Ç–Ω–æ—à–µ–Ω–∏—è –¥–ª–∏–ª–∏—Å—å 6 –ª–µ—Ç, –¥–µ–≤—É—à–∫–∞ –∑–∞–±–µ—Ä–µ–º–µ–Ω–µ–ª–∞ –∏ —É–º–µ—Ä–ª–∞ –ø—Ä–∏ —Ä–æ–¥–∞—Ö, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–∞—É–∑–∞ 2 –≥–æ–¥–∞"
    father_location: str = "–ê–Ω—Ç–∞–ª—å—è, –¢—É—Ä—Ü–∏—è"
    mother_location: str = "–ú–∞–¥—Ä–∏–¥, –ò—Å–ø–∞–Ω–∏—è"
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä
    personality: List[str] = [
        "–û—Ç–∫—Ä—ã—Ç—ã–π", "–ì–∏–±–∫–∏–π", "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π", "–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π",
        "–ó–∞–±–æ—Ç–ª–∏–≤—ã–π", "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–ª–∞–¥ —É–º–∞", "–í—ã–Ω–æ—Å–ª–∏–≤—ã–π"
    ]
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—â–µ–Ω–∏—è
    morning_greetings: List[str] = [
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ ‚òÄÔ∏è",
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Å–ø–∞–ª–æ—Å—å?",
        "–£—Ç—Ä–æ! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
    ]
    
    evening_greetings: List[str] = [
        "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä üåô", 
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
        "–í–µ—á–µ—Ä! –ö–∞–∫ –ø—Ä–æ—à—ë–ª –¥–µ–Ω—å?"
    ]
    
    support_phrases: List[str] = [
        "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è",
        "–¢—ã –º–æ–ª–æ–¥–µ—Ü",
        "–í—Å—ë —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è",
        "–Ø –≤ —Ç–µ–±—è –≤–µ—Ä—é"
    ]